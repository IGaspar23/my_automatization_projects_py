# This script is intented to create a csv file with fake database of all the costumers we will use in the main program 

#Packages and libraries
import csv
from faker import Faker
from datetime import datetime, timedelta
import random 

fake = Faker('es_MX')   #Set the location to Mexico

# We redefine the format of the phone number generated by faker, giving a MX phone format.

def format_phone_number(phone_number):
  # Format the phone  number to match the desired fromat: +52 &&& && &&
  return f"+52 {phone_number[:3]} {phone_number[3:6]} {phone_number[6:9]}"

# This functon crates fake information of ficticious customers
def generate_random_client():
    name = fake.name()
    email = fake.email()
    phone_number = format_phone_number(fake.phone_number())
    
    # Generate random payment due time within the last year
    last_payment_date= (datetime.now() - timedelta(days=fake.random_int(1,365))).strftime('%Y-%m-%d')
    
    # Randomly select payment period
    payment_periods = ["monthly", "quarterly", "annually"]
    payment_period = random.choice(payment_periods)
    
    #Calculate the next payment date based on payment due time
    if payment_period == "monthly":
        next_payment_date = (datetime.strptime(last_payment_date, '%Y-%m-%d') + timedelta(days=30)).strftime('%Y-%m-%d')
    elif payment_period == "quarterly":
        next_payment_date = (datetime.strptime(last_payment_date, '%Y-%m-%d') + timedelta(days=90)).strftime('%Y-%m-%d')
    elif payment_period == "annually": 
        next_payment_date = (datetime.strptime(last_payment_date, '%Y-%m-%d') + timedelta(days=365)).strftime('%Y-%m-%d') 
    else:
        raise ValueError("Invalid payment period")
    
    return [name, email, phone_number, last_payment_date, payment_period, next_payment_date]

def create_csv(filename, num_clients):
    header= ["Name", "email", "Phone number", "Last payment", "Period", "Next payment"]
    rows = [header]
    
    for _ in range(num_clients):
        client_data = generate_random_client()
        rows.append(client_data)
    
    with open(filename, 'w', newline='') as csv_file:
        csv_writer = csv.writer(csv_file)
        csv_writer.writerows(rows)

if __name__ == "_main_":
    output_filename = "client_information.csv"
    num_clients_to_generate = 150
    
    create_csv(output_filename, num_clients_to_generate)